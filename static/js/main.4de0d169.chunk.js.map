{"version":3,"sources":["utils.ts","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","items","map","concat","App","perPage","setPerPage","useState","currentPage","setCurrentPage","totalPage","setTotal","Math","ceil","_jsxs","className","children","_jsx","defaultValue","onChange","event","parseInt","currentTarget","value","id","htmlFor","onClick","href","num","slice","item","ReactDOM","render","document","getElementById"],"mappings":"4JAAO,SAASA,EAAWC,EAAcC,GACvC,MAAMC,EAAU,GAEhB,IAAK,IAAIC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCAT,MAAMG,EAAQN,EAAW,EAAG,IAAIO,KAAIH,GAAC,QAAAI,OAAYJ,KAEpCK,EAAgBA,KAC3B,MAAOC,EAASC,GAAcC,mBAAS,IAChCC,EAAaC,GAAkBF,mBAAS,IACxCG,EAAWC,GAAYJ,mBAAS,IAajCT,EAAUH,EAAW,EADRiB,KAAKC,KAAKH,EAAYL,IAGzC,OACES,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBC,cAAA,MAAAD,SAAI,0BAEJC,cAAA,KAAGF,UAAU,OAAO,UAAQ,OAAMC,SAAA,QAAAb,OACvBK,EAAW,YAAAL,OAAWK,EAAcH,EAAUA,EAAU,EAAC,OAAAF,OAChEK,IAAgBI,KAAKC,KAAKH,EAAYL,GAClCK,EACAF,EAAcH,EAAO,aAI7BS,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,OAAKF,UAAU,0BAAyBC,SACtCF,eAAA,UACEI,aAAc,EACdC,SAzBcC,IACtBd,EAAWe,SAASD,EAAME,cAAcC,MAAO,KAC/CZ,EAASD,GACTD,EAAe,IAuBP,UAAQ,kBACRe,GAAG,kBACHT,UAAU,eAAcC,SAAA,CAExBC,cAAA,UAAQM,MAAM,IAAGP,SAAC,MAClBC,cAAA,UAAQM,MAAM,IAAGP,SAAC,MAClBC,cAAA,UAAQM,MAAM,KAAIP,SAAC,OACnBC,cAAA,UAAQM,MAAM,KAAIP,SAAC,YAIvBC,cAAA,SAAOQ,QAAQ,kBAAkBV,UAAU,qBAAoBC,SAAC,sBAUlEF,eAAA,MAAIC,UAAU,aAAYC,SAAA,CACxBC,cAAA,MAAIF,UAAS,aAAAZ,OAAeK,GAAe,EAAI,WAAa,IAAKQ,SAC/DC,cAAA,KACES,QAASA,KACHlB,EAAc,GAChBC,EAAeD,EAAc,IAGjC,UAAQ,WACRO,UAAU,YACVY,KAAI,IAAAxB,OAAMK,GACV,gBAAeA,GAAe,EAAI,OAAS,QAAQQ,SACpD,WAIFlB,EAAQI,KAAI0B,GACXX,cAAA,MAEEF,UAAS,aAAAZ,OAAeK,IAAgBoB,EAAM,SAAW,IAAKZ,SAE9DC,cAAA,KACE,UAAQ,WACRS,QAASA,IAAMjB,EAAemB,GAC9Bb,UAAU,YACVY,KAAI,IAAAxB,OAAMyB,GAAMZ,SAEfY,KATEA,KAaTX,cAAA,MACEF,UAAS,aAAAZ,OACPK,IAAgBE,GAAaL,EAAUG,GAAeE,EAClD,WACA,IACHM,SAEHC,cAAA,KACES,QAASA,KACHlB,GAAe,GAAKA,EAAcE,GACpCD,EAAeD,EAAc,IAGjC,UAAQ,WACRO,UAAU,YACVY,KAAK,QACL,gBACEnB,IAAgBE,GAAaL,EAAUG,GAAeE,EAClD,OACA,QACLM,SACF,cAKLC,cAAA,MAAAD,SA3GKf,EAAM4B,MAAMrB,EAAcH,EAAUA,EAASG,EAAcH,GA4G9CH,KAAI4B,GAClBb,cAAA,MAAI,UAAQ,OAAMD,SACfc,GADqBA,WCzHlCC,IAASC,OAAOf,cAACb,EAAG,IAAK6B,SAASC,eAAe,U","file":"static/js/main.4de0d169.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\n// import { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nconst items = getNumbers(1, 42).map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotal] = useState(42);\n\n  const itemsToPrint = () => {\n    return items.slice(currentPage * perPage - perPage, currentPage * perPage);\n  };\n\n  const onSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(parseInt(event.currentTarget.value, 10));\n    setTotal(totalPage);\n    setCurrentPage(1);\n  };\n\n  const totalPages = Math.ceil(totalPage / perPage);\n  const numbers = getNumbers(1, totalPages);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${currentPage * perPage - perPage + 1} - ${\n          currentPage === Math.ceil(totalPage / perPage)\n            ? totalPage\n            : currentPage * perPage\n        } of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            defaultValue={5}\n            onChange={onSelectChange}\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      {/* <Pagination\n        totalPage={totalPage}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      /> */}\n      <ul className=\"pagination\">\n        <li className={`page-item ${currentPage <= 1 ? 'disabled' : ''}`}>\n          <a\n            onClick={() => {\n              if (currentPage > 1) {\n                setCurrentPage(currentPage - 1);\n              }\n            }}\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href={`#${currentPage}`}\n            aria-disabled={currentPage <= 1 ? 'true' : 'false'}\n          >\n            «\n          </a>\n        </li>\n        {numbers.map(num => (\n          <li\n            key={num}\n            className={`page-item ${currentPage === num ? 'active' : ''}`}\n          >\n            <a\n              data-cy=\"pageLink\"\n              onClick={() => setCurrentPage(num)}\n              className=\"page-link\"\n              href={`#${num}`}\n            >\n              {num}\n            </a>\n          </li>\n        ))}\n        <li\n          className={`page-item ${\n            currentPage === totalPage || perPage * currentPage >= totalPage\n              ? 'disabled'\n              : ''\n          }`}\n        >\n          <a\n            onClick={() => {\n              if (currentPage >= 1 && currentPage < totalPage) {\n                setCurrentPage(currentPage + 1);\n              }\n            }}\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={\n              currentPage === totalPage || perPage * currentPage >= totalPage\n                ? 'true'\n                : 'false'\n            }\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {itemsToPrint().map(item => (\n          <li data-cy=\"item\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}